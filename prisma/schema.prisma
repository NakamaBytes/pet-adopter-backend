generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  username           String              @unique
  firstName          String?
  lastName           String?
  phone              String?
  address            String?
  email              String              @unique
  password           String
  image_url          String?
  lon                String?
  lat                String?
  birthDate          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  emailConfirmations EmailConfirmation[]
  phoneConfirmations PhoneConfirmation[]
  roles              TrUserRole[]
  AdoptionUser       AdoptionUser[]
  UserShelter        UserShelter[]
}

model TrUserRole {
  id        String   @id @default(uuid()) @db.Uuid
  roleId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        RoleName     @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  userRoles   TrUserRole[]
}

model EmailConfirmation {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  confirmationCode String   @unique
  isConfirmed      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PhoneConfirmation {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  otpCode    String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Pet {
  id           String         @id @default(uuid()) @db.Uuid
  speciesId    String         @db.Uuid
  name         String
  gender       Gender         @default(Male)
  age          Int            @default(0)
  color        String
  pet_image    String?
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  PetGallery   PetGallery[]
  AdoptionUser AdoptionUser[]
  PetShelter   PetShelter[]

  species Species @relation(fields: [speciesId], references: [id], onDelete: Cascade)
}

model PetGallery {
  id        String   @id @default(uuid()) @db.Uuid
  petId     String   @db.Uuid
  assetURL  String
  assetType String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model AdoptionUser {
  id            String         @id @default(uuid()) @db.Uuid
  userId        String         @db.Uuid
  petId         String         @db.Uuid
  status        AdoptionStatus
  isCurrentUser Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  users         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pets          Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Shelter {
  id             String           @id @default(uuid()) @db.Uuid
  name           String
  image_url      String?
  description    String?
  address        String?
  lon            String?
  lat            String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  ShelterGallery ShelterGallery[]
  PetShelter     PetShelter[]
  UserShelter    UserShelter[]
}

model ShelterGallery {
  id        String   @id @default(uuid()) @db.Uuid
  shelterId String   @db.Uuid
  assetURL  String
  assetType String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  shelters  Shelter  @relation(fields: [shelterId], references: [id], onDelete: Cascade)
}

model UserShelter {
  id        String          @id @default(uuid()) @db.Uuid
  userId    String          @db.Uuid
  shelterId String          @db.Uuid
  role      RoleShelterName @default(OWNER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  users     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shelters  Shelter         @relation(fields: [shelterId], references: [id], onDelete: Cascade)
}

model PetShelter {
  id        String         @id @default(uuid()) @db.Uuid
  petId     String         @db.Uuid
  shelterId String         @db.Uuid
  status    ApprovalStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  Pets      Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
  shelters  Shelter        @relation(fields: [shelterId], references: [id], onDelete: Cascade)
}

// Master
model Species {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Pet       Pet[]
}

enum RoleName {
  USER
  ADMINISTRATOR
}

enum RoleShelterName {
  MEMBER
  OWNER
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum Gender {
  Male
  Female
}

enum ApprovalStatus {
  PENDING
  REJECTED
  APPROVED
}

enum AdoptionStatus {
  AVAILABLE
  PENDING
  ADOPTED
  NOT_AVAILABLE
  RESCUED
  UNDER_CONSIDERATION
}
